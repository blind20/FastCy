package com.xs.fastcy.cypda.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xs.fastcy.cypda.entity.VehPhoto;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tm_vehphoto".
*/
public class VehPhotoDao extends AbstractDao<VehPhoto, Long> {

    public static final String TABLENAME = "tm_vehphoto";

    /**
     * Properties of entity VehPhoto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property PhotoId = new Property(0, Long.class, "photoId", true, "_id");
        public final static Property ImgPath = new Property(1, String.class, "imgPath", false, "IMG_PATH");
        public final static Property Zpzl = new Property(2, String.class, "zpzl", false, "ZPZL");
        public final static Property ZpName = new Property(3, String.class, "zpName", false, "ZP_NAME");
        public final static Property Lsh = new Property(4, String.class, "lsh", false, "LSH");
        public final static Property Clsbdh = new Property(5, String.class, "clsbdh", false, "CLSBDH");
        public final static Property Hphm = new Property(6, String.class, "hphm", false, "HPHM");
        public final static Property Jccs = new Property(7, int.class, "jccs", false, "JCCS");
        public final static Property Scbj = new Property(8, String.class, "scbj", false, "SCBJ");
        public final static Property Createtime = new Property(9, java.util.Date.class, "createtime", false, "CREATETIME");
    }


    public VehPhotoDao(DaoConfig config) {
        super(config);
    }
    
    public VehPhotoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tm_vehphoto\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: photoId
                "\"IMG_PATH\" TEXT," + // 1: imgPath
                "\"ZPZL\" TEXT," + // 2: zpzl
                "\"ZP_NAME\" TEXT," + // 3: zpName
                "\"LSH\" TEXT," + // 4: lsh
                "\"CLSBDH\" TEXT," + // 5: clsbdh
                "\"HPHM\" TEXT," + // 6: hphm
                "\"JCCS\" INTEGER NOT NULL ," + // 7: jccs
                "\"SCBJ\" TEXT," + // 8: scbj
                "\"CREATETIME\" INTEGER);"); // 9: createtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tm_vehphoto\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, VehPhoto entity) {
        stmt.clearBindings();
 
        Long photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindLong(1, photoId);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(2, imgPath);
        }
 
        String zpzl = entity.getZpzl();
        if (zpzl != null) {
            stmt.bindString(3, zpzl);
        }
 
        String zpName = entity.getZpName();
        if (zpName != null) {
            stmt.bindString(4, zpName);
        }
 
        String lsh = entity.getLsh();
        if (lsh != null) {
            stmt.bindString(5, lsh);
        }
 
        String clsbdh = entity.getClsbdh();
        if (clsbdh != null) {
            stmt.bindString(6, clsbdh);
        }
 
        String hphm = entity.getHphm();
        if (hphm != null) {
            stmt.bindString(7, hphm);
        }
        stmt.bindLong(8, entity.getJccs());
 
        String scbj = entity.getScbj();
        if (scbj != null) {
            stmt.bindString(9, scbj);
        }
 
        java.util.Date createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(10, createtime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, VehPhoto entity) {
        stmt.clearBindings();
 
        Long photoId = entity.getPhotoId();
        if (photoId != null) {
            stmt.bindLong(1, photoId);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(2, imgPath);
        }
 
        String zpzl = entity.getZpzl();
        if (zpzl != null) {
            stmt.bindString(3, zpzl);
        }
 
        String zpName = entity.getZpName();
        if (zpName != null) {
            stmt.bindString(4, zpName);
        }
 
        String lsh = entity.getLsh();
        if (lsh != null) {
            stmt.bindString(5, lsh);
        }
 
        String clsbdh = entity.getClsbdh();
        if (clsbdh != null) {
            stmt.bindString(6, clsbdh);
        }
 
        String hphm = entity.getHphm();
        if (hphm != null) {
            stmt.bindString(7, hphm);
        }
        stmt.bindLong(8, entity.getJccs());
 
        String scbj = entity.getScbj();
        if (scbj != null) {
            stmt.bindString(9, scbj);
        }
 
        java.util.Date createtime = entity.getCreatetime();
        if (createtime != null) {
            stmt.bindLong(10, createtime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public VehPhoto readEntity(Cursor cursor, int offset) {
        VehPhoto entity = new VehPhoto( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // photoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgPath
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // zpzl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zpName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // lsh
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // clsbdh
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hphm
            cursor.getInt(offset + 7), // jccs
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // scbj
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // createtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, VehPhoto entity, int offset) {
        entity.setPhotoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImgPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setZpzl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZpName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLsh(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClsbdh(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHphm(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJccs(cursor.getInt(offset + 7));
        entity.setScbj(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreatetime(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(VehPhoto entity, long rowId) {
        entity.setPhotoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(VehPhoto entity) {
        if(entity != null) {
            return entity.getPhotoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(VehPhoto entity) {
        return entity.getPhotoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
